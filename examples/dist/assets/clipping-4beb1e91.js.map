{"version":3,"file":"clipping-4beb1e91.js","sources":["../../tests/clipping.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { waitForTextDimensions } from '../common/utils.js';\nimport { deg2Rad } from '@lightningjs/renderer/utils';\nimport type { INodeWritableProps } from '@lightningjs/renderer';\nimport robotImg from '../assets/robot/robot.png';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nconst SQUARE_SIZE = 200;\nconst PADDING = 20;\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    title: 'Clipping Tests',\n  });\n\n  await paginateTestRows(pageContainer, [\n    {\n      title:\n        'Standard node clips DIRECT children that are outside of its bounds',\n      content: async (rowNode) => {\n        let curX = 0;\n        /// TOP LEFT\n        const clipContainerTopLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerTopLeft,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// TOP RIGHT\n        const clipContainerTopRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerTopRight,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM RIGHT\n        const clipContainerBottomRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 100,\n          y: 100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerBottomRight,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM LEFT\n        const clipContainerBottomLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: -100,\n          y: 100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerBottomLeft,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        // ALL SIDES\n        const clipAllSides = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE * 2,\n          height: SQUARE_SIZE * 2,\n          src: robotImg,\n          parent: clipAllSides,\n        });\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'Standard node clips ANCESTOR children that are outside of its bounds',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        /// TOP LEFT\n        const clipContainerTopLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerTopLeft2 = renderer.createNode({\n          parent: clipContainerTopLeft,\n        });\n        renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerTopLeft2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// TOP RIGHT\n        const clipContainerTopRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerTopRight2 = renderer.createNode({\n          parent: clipContainerTopRight,\n        });\n        renderer.createNode({\n          x: 100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerTopRight2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM RIGHT\n        const clipContainerBottomRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerBottomRight2 = renderer.createNode({\n          parent: clipContainerBottomRight,\n        });\n        renderer.createNode({\n          x: 100,\n          y: 100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerBottomRight2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM LEFT\n        const clipContainerBottomLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerBottomLeft2 = renderer.createNode({\n          parent: clipContainerBottomLeft,\n        });\n        renderer.createNode({\n          x: -100,\n          y: 100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerBottomLeft2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        // ALL SIDES\n        const clipAllSides = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipAllSides2 = renderer.createNode({\n          parent: clipAllSides,\n        });\n        renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE * 2,\n          height: SQUARE_SIZE * 2,\n          src: robotImg,\n          parent: clipAllSides2,\n        });\n\n        rowNode.height = SQUARE_SIZE;\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'Nested clipping nodes clip children that are outside of their interesected bounds',\n      content: async (rowNode) => {\n        let curX = 0;\n        /// TOP LEFT\n        const clipContainerTopLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerTopLeft2 = renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0xff0000ff,\n          src: robotImg,\n          parent: clipContainerTopLeft,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 50,\n          y: 50,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          src: robotImg,\n          parent: clipContainerTopLeft2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// TOP RIGHT\n        const clipContainerTopRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerTopRight2 = renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0xff0000ff,\n          src: robotImg,\n          parent: clipContainerTopRight,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 150,\n          y: 50,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          src: robotImg,\n          parent: clipContainerTopRight2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM RIGHT\n        const clipContainerBottomRight = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerBottomRight2 = renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0xff0000ff,\n          src: robotImg,\n          parent: clipContainerBottomRight,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 150,\n          y: 150,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          src: robotImg,\n          parent: clipContainerBottomRight2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        /// BOTTOM LEFT\n        const clipContainerBottomLeft = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerBottomLeft2 = renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0xff0000ff,\n          src: robotImg,\n          parent: clipContainerBottomLeft,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 50,\n          y: 150,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          src: robotImg,\n          parent: clipContainerBottomLeft2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        // ALL SIDES\n        const clipContainerAllSides = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0x00ff00ff,\n          parent: rowNode,\n          clipping: true,\n        });\n        const clipContainerAllSides2 = renderer.createNode({\n          x: -100,\n          y: -100,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          color: 0xff0000ff,\n          src: robotImg,\n          parent: clipContainerAllSides,\n          clipping: true,\n        });\n        renderer.createNode({\n          x: 50,\n          y: 50,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          src: robotImg,\n          parent: clipContainerAllSides2,\n        });\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'Canvas text node clips DIRECT text node children that is outside of its bounds',\n      content: async (rowNode) => {\n        const curX = 0;\n\n        /// Direct\n        renderer.createTextNode({\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          fontFamily: 'Ubuntu',\n          fontSize: 40,\n          textRendererOverride: 'canvas',\n          text: 'Canvas direct clipping',\n          clipping: true,\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'Canvas text clips ANCESTOR text node children that is outside of its bounds',\n      content: async (rowNode) => {\n        const curX = 0;\n\n        const parent = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          clipping: true,\n        });\n\n        renderer.createTextNode({\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent,\n          fontFamily: 'Ubuntu',\n          fontSize: 40,\n          color: 0x000000ff,\n          textRendererOverride: 'canvas',\n          text: 'Canvas ancestor clipping',\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'SDF text clips DIRECT text node children that is outside of its bounds',\n      content: async (rowNode) => {\n        const curX = 0;\n\n        /// Direct\n        renderer.createTextNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          fontFamily: 'Ubuntu',\n          fontSize: 40,\n          textRendererOverride: 'sdf',\n          text: 'SDF direct clipping',\n          clipping: true,\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title:\n        'SDF text clips ANCESTOR text node children that is outside of its bounds',\n      content: async (rowNode) => {\n        const curX = 0;\n\n        const parent = renderer.createNode({\n          x: curX,\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          clipping: true,\n        });\n\n        renderer.createTextNode({\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent,\n          fontFamily: 'Ubuntu',\n          fontSize: 40,\n          color: 0x000000ff,\n          textRendererOverride: 'sdf',\n          text: 'SDF ancestor clipping',\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title: 'Clipping bounds are scaled with the `scale` property',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          color: 0x00ff00ff,\n          clipping: true,\n        } satisfies Partial<INodeWritableProps>;\n\n        const clippingParentProps = {\n          mount: 0.5,\n          x: SQUARE_SIZE / 2,\n          y: SQUARE_SIZE / 2,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          clipping: true,\n          // rotation: Math.PI / 4\n        } satisfies Partial<INodeWritableProps>;\n\n        const clippingChildProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          mount: 0.5,\n          src: robotImg,\n        } satisfies Partial<INodeWritableProps>;\n\n        const container = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent = renderer.createNode({\n          ...clippingParentProps,\n          parent: container,\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        const dim = await waitForTextDimensions(\n          renderer.createTextNode({\n            mountY: 0.5,\n            x: curX,\n            y: SQUARE_SIZE / 2,\n            text: 'scale 2 >',\n            parent: rowNode,\n          }),\n        );\n\n        curX += dim.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent2 = renderer.createNode({\n          ...clippingParentProps,\n          parent: container2,\n          scale: 2,\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent2,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        const dim2 = await waitForTextDimensions(\n          renderer.createTextNode({\n            mountY: 0.5,\n            x: curX,\n            y: SQUARE_SIZE / 2,\n            text: 'pivot 0 >',\n            parent: rowNode,\n          }),\n        );\n\n        curX += dim.width + PADDING;\n\n        const container3 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent3 = renderer.createNode({\n          ...clippingParentProps,\n          parent: container3,\n          scale: 2,\n          pivot: 0,\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent3,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        const dim3 = await waitForTextDimensions(\n          renderer.createTextNode({\n            mountY: 0.5,\n            x: curX,\n            y: SQUARE_SIZE / 2,\n            text: 'pivot 1 >',\n            parent: rowNode,\n          }),\n        );\n\n        curX += dim.width + PADDING;\n\n        const container4 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent4 = renderer.createNode({\n          ...clippingParentProps,\n          parent: container4,\n          scale: 2,\n          pivot: 1,\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent4,\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n    {\n      title: 'Clipping is automatically disabled when node is rotated',\n      content: async (rowNode) => {\n        let curX = 0;\n\n        const containerProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          parent: rowNode,\n          color: 0x00ff00ff,\n          clipping: true,\n        } satisfies Partial<INodeWritableProps>;\n\n        const clippingParentProps = {\n          mount: 0.5,\n          x: SQUARE_SIZE / 2,\n          y: SQUARE_SIZE / 2,\n          width: SQUARE_SIZE / 2,\n          height: SQUARE_SIZE / 2,\n          clipping: true,\n        } satisfies Partial<INodeWritableProps>;\n\n        const clippingChildProps = {\n          width: SQUARE_SIZE,\n          height: SQUARE_SIZE,\n          mount: 0.5,\n          src: robotImg,\n        } satisfies Partial<INodeWritableProps>;\n\n        const container = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent = renderer.createNode({\n          ...clippingParentProps,\n          parent: container,\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent,\n        });\n\n        curX += SQUARE_SIZE + PADDING;\n\n        const dimensions = await waitForTextDimensions(\n          renderer.createTextNode({\n            mountY: 0.5,\n            x: curX,\n            y: SQUARE_SIZE / 2,\n            text: 'rotate 45 degrees >',\n            parent: rowNode,\n          }),\n        );\n\n        curX += dimensions.width + PADDING;\n\n        const container2 = renderer.createNode({\n          ...containerProps,\n          x: curX,\n        });\n\n        const clippingParent2 = renderer.createNode({\n          ...clippingParentProps,\n          parent: container2,\n          rotation: deg2Rad(45),\n        });\n\n        renderer.createNode({\n          ...clippingChildProps,\n          parent: clippingParent2,\n        });\n\n        return SQUARE_SIZE;\n      },\n    },\n  ]);\n\n  return pageContainer;\n}\n"],"names":[],"mappings":"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"}