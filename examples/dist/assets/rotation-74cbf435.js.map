{"version":3,"file":"rotation-74cbf435.js","sources":["../../tests/rotation.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  const randomColor = () => {\n    const randomInt = Math.floor(Math.random() * Math.pow(2, 32));\n    const hexString = randomInt.toString(16).padStart(8, '0');\n\n    return parseInt(hexString, 16);\n  };\n\n  const rnd = (min: number, max: number) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  new Array(15).fill(0).forEach((el, idx) => {\n    const pivot = 0.5; //Math.random();\n\n    const node = renderer.createNode({\n      x: Math.floor(idx % 5) * 360 + 100,\n      y: Math.floor(idx / 5) * 360 + 100,\n      width: 200,\n      height: 200,\n      colorBottom: randomColor(),\n      colorTop: randomColor(),\n      parent: testRoot,\n      shader: renderer.createShader('RoundedRectangle', {\n        radius: rnd(10, 50),\n      }),\n      scale: 1,\n      pivot,\n    });\n\n    const pivotPoint = renderer.createNode({\n      x: pivot * 200 - 5,\n      y: pivot * 200 - 5,\n      width: 10,\n      height: 10,\n      color: 0xffffff55,\n      parent: node,\n      scale: 1,\n    });\n\n    const pointInner = renderer.createNode({\n      x: 2,\n      y: 2,\n      width: 6,\n      height: 6,\n      color: 0x000000ff,\n      parent: pivotPoint,\n    });\n\n    setTimeout(() => {\n      node\n        .animate(\n          {\n            scale: 1.2,\n            y: 460,\n            x: 820,\n            width: 10,\n            height: 180,\n            rotation: Math.PI * 2,\n          },\n          {\n            duration: rnd(2500, 2700),\n            loop: false,\n            stopMethod: 'reverse',\n            easing: 'cubic-bezier(0,1.35,.99,-0.07)',\n          },\n        )\n        .start();\n    }, 1500);\n  });\n\n  console.log('ready!');\n}\n"],"names":[],"mappings":"AAqB+B,eAAA,SAAA,EAAE,UAAU,YAA6B;AACtE,QAAM,cAAc,MAAM;AAClB,UAAA,YAAY,KAAK,MAAM,KAAK,WAAW,KAAK,IAAI,GAAG,EAAE,CAAC;AAC5D,UAAM,YAAY,UAAU,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG;AAEjD,WAAA,SAAS,WAAW,EAAE;AAAA,EAAA;AAGzB,QAAA,MAAM,CAAC,KAAa,QAAgB;AACjC,WAAA,KAAK,MAAM,KAAK,OAAA,KAAY,MAAM,MAAM,KAAK,GAAG;AAAA,EAAA;AAGrD,MAAA,MAAM,EAAE,EAAE,KAAK,CAAC,EAAE,QAAQ,CAAC,IAAI,QAAQ;AACzC,UAAM,QAAQ;AAER,UAAA,OAAO,SAAS,WAAW;AAAA,MAC/B,GAAG,KAAK,MAAM,MAAM,CAAC,IAAI,MAAM;AAAA,MAC/B,GAAG,KAAK,MAAM,MAAM,CAAC,IAAI,MAAM;AAAA,MAC/B,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,aAAa,YAAY;AAAA,MACzB,UAAU,YAAY;AAAA,MACtB,QAAQ;AAAA,MACR,QAAQ,SAAS,aAAa,oBAAoB;AAAA,QAChD,QAAQ,IAAI,IAAI,EAAE;AAAA,MAAA,CACnB;AAAA,MACD,OAAO;AAAA,MACP;AAAA,IAAA,CACD;AAEK,UAAA,aAAa,SAAS,WAAW;AAAA,MACrC,GAAG,QAAQ,MAAM;AAAA,MACjB,GAAG,QAAQ,MAAM;AAAA,MACjB,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,IAAA,CACR;AAEkB,aAAS,WAAW;AAAA,MACrC,GAAG;AAAA,MACH,GAAG;AAAA,MACH,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAED,eAAW,MAAM;AAEZ,WAAA;AAAA,QACC;AAAA,UACE,OAAO;AAAA,UACP,GAAG;AAAA,UACH,GAAG;AAAA,UACH,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,UAAU,KAAK,KAAK;AAAA,QACtB;AAAA,QACA;AAAA,UACE,UAAU,IAAI,MAAM,IAAI;AAAA,UACxB,MAAM;AAAA,UACN,YAAY;AAAA,UACZ,QAAQ;AAAA,QACV;AAAA,QAED,MAAM;AAAA,OACR,IAAI;AAAA,EAAA,CACR;AAED,UAAQ,IAAI,QAAQ;AACtB;"}