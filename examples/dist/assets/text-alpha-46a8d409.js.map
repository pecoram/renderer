{"version":3,"file":"text-alpha-46a8d409.js","sources":["../../tests/text-alpha.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport type {\n  INodeWritableProps,\n  ITextNodeWritableProps,\n  RendererMain,\n} from '../../dist/exports/main-api.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\n\nconst containerSize = 100;\n\nconst NODE_PROPS = {\n  mount: 0.5,\n  x: containerSize / 2,\n  y: containerSize / 2,\n  color: 0x000000ff,\n  text: 'xyz',\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 50,\n} satisfies Partial<ITextNodeWritableProps>;\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    parent: testRoot,\n    title: 'Text Alpha',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateAlphaTest(renderer, 'sdf'),\n    ...generateAlphaTest(renderer, 'canvas'),\n  ]);\n\n  return pageContainer;\n}\n\nfunction generateAlphaTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n): TestRow[] {\n  return [\n    {\n      title: `Direct Alpha Prop (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          renderer.createTextNode({\n            ...nodeProps,\n          }),\n          'alpha 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.5,\n          }),\n          'alpha 0.05 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.05,\n          }),\n          'alpha 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Parent Alpha Prop (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n          }),\n          'alpha 0.5 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.5,\n          }),\n          'alpha 0.05 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.05,\n          }),\n          'alpha 0 ->',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Direct Alpha Prop + Color Alpha (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 1.0,\n            color: 0x000000ff,\n          }),\n          'color.a -> 0.5',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 1.0,\n            color: 0x00000080,\n          }),\n          'alpha -> 0.5',\n          renderer.createTextNode({\n            ...nodeProps,\n            alpha: 0.5,\n            color: 0x00000080,\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Parent Alpha Prop + Color Alpha (${textRenderer})`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        return await constructTestRow({ renderer, rowNode, containerSize }, [\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n            color: 0xff0000ff,\n          }),\n          'container\\n  .color.a -> 0.5',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 1.0,\n            // Just changing the color alpha of the container doesn't affect\n            // the contained text's alpha\n            color: 0xff000080,\n          }),\n          'container\\n  .alpha -> 0.5',\n          createContainedTextNode(renderer, textRenderer, {\n            alpha: 0.5,\n            color: 0xff000080,\n          }),\n        ]);\n      },\n    },\n    null,\n  ] satisfies TestRow[];\n}\n\nfunction createContainedTextNode(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n  containerProps: Partial<INodeWritableProps>,\n) {\n  const container = renderer.createNode({\n    width: containerSize,\n    height: containerSize,\n    color: 0x00ff00ff,\n    ...containerProps,\n  });\n  renderer.createTextNode({\n    ...NODE_PROPS,\n    textRendererOverride: textRenderer,\n    parent: container,\n    // alpha: 0.50,\n  });\n  return container;\n}\n"],"names":[],"mappings":"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"}