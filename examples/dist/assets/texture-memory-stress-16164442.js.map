{"version":3,"file":"texture-memory-stress-16164442.js","sources":["../../tests/texture-memory-stress.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { RendererMainSettings } from '../../dist/exports/main-api.js';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport function customSettings(\n  urlParams: URLSearchParams,\n): Partial<RendererMainSettings> {\n  const finalizationRegistry = urlParams.get('finalizationRegistry') === 'true';\n  return {\n    textureCleanupOptions: {\n      textureCleanupAgeThreadholdMs: 6000,\n      textureCleanupIntervalMs: 1000,\n    },\n    experimental_FinalizationRegistryTextureUsageTracker: finalizationRegistry,\n  };\n}\n\nexport default async function ({ renderer, testRoot }: ExampleSettings) {\n  const screen = renderer.createNode({\n    x: 0,\n    y: 0,\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    parent: testRoot,\n    color: 0xff00ffff,\n  });\n\n  renderer.createTextNode({\n    x: 0,\n    y: 0,\n    text: 'Texture Memory Stress Test',\n    parent: screen,\n    fontFamily: 'Ubuntu',\n    fontSize: 60,\n  });\n\n  renderer.createTextNode({\n    x: 0,\n    y: 100,\n    width: renderer.settings.appWidth,\n    contain: 'width',\n    text: `This test will create and display a random texture every 10ms.\n\nTo test that the textures are being properly disposed of, you can use the Chrome Task Manager to monitor the GPU's memory usage:\n\n1. Click Window > Task Manager\n2. Locate the \"GPU Process\"\n3. Observe the \"Memory Footprint\" column\n4. The value should eventually drop significantly toward a minimum and/or reach a\nthreadhold.\n\nBy default, the ManualCountTextureUsageTracker is used to track texture usage. Also test the experimental FinalizationRegistryTextureUsageTracker instead, by setting the URL param \"finalizationRegistry=true\".\n    `,\n    parent: screen,\n    fontFamily: 'Ubuntu',\n    fontSize: 40,\n  });\n\n  // Create a new random texture every 10ms\n  setInterval(() => {\n    screen.texture = renderer.createTexture(\n      'NoiseTexture',\n      {\n        width: 500,\n        height: 500,\n        cacheId: Math.floor(Math.random() * 100000),\n      },\n      {\n        preload: true,\n      },\n    );\n  }, 10);\n}\n"],"names":[],"mappings":"AAqBO,SAAS,eACd,WAC+B;AAC/B,QAAM,uBAAuB,UAAU,IAAI,sBAAsB,MAAM;AAChE,SAAA;AAAA,IACL,uBAAuB;AAAA,MACrB,+BAA+B;AAAA,MAC/B,0BAA0B;AAAA,IAC5B;AAAA,IACA,sDAAsD;AAAA,EAAA;AAE1D;AAE+B,eAAA,oBAAA,EAAE,UAAU,YAA6B;AAChE,QAAA,SAAS,SAAS,WAAW;AAAA,IACjC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO,SAAS,SAAS;AAAA,IACzB,QAAQ,SAAS,SAAS;AAAA,IAC1B,QAAQ;AAAA,IACR,OAAO;AAAA,EAAA,CACR;AAED,WAAS,eAAe;AAAA,IACtB,GAAG;AAAA,IACH,GAAG;AAAA,IACH,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,UAAU;AAAA,EAAA,CACX;AAED,WAAS,eAAe;AAAA,IACtB,GAAG;AAAA,IACH,GAAG;AAAA,IACH,OAAO,SAAS,SAAS;AAAA,IACzB,SAAS;AAAA,IACT,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYN,QAAQ;AAAA,IACR,YAAY;AAAA,IACZ,UAAU;AAAA,EAAA,CACX;AAGD,cAAY,MAAM;AAChB,WAAO,UAAU,SAAS;AAAA,MACxB;AAAA,MACA;AAAA,QACE,OAAO;AAAA,QACP,QAAQ;AAAA,QACR,SAAS,KAAK,MAAM,KAAK,OAAA,IAAW,GAAM;AAAA,MAC5C;AAAA,MACA;AAAA,QACE,SAAS;AAAA,MACX;AAAA,IAAA;AAAA,KAED,EAAE;AACP;"}