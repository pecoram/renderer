{"version":3,"file":"text-scaling-90394712.js","sources":["../../tests/text-scaling.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\nimport { paginateTestRows, type TestRow } from '../common/paginateTestRows.js';\nimport { PageContainer } from '../common/PageContainer.js';\nimport { waitForTextDimensions } from '../common/utils.js';\nimport type {\n  ITextNodeWritableProps,\n  RendererMain,\n} from '../../dist/exports/main-api.js';\nimport { constructTestRow } from '../common/constructTestRow.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot all the pages\n  await (await test(settings)).snapshotPages();\n}\n\nexport default async function test(settings: ExampleSettings) {\n  const { renderer, testRoot } = settings;\n  const pageContainer = new PageContainer(settings, {\n    width: renderer.settings.appWidth,\n    height: renderer.settings.appHeight,\n    parent: testRoot,\n    title: 'Text Scaling',\n  });\n\n  await paginateTestRows(pageContainer, [\n    ...generateScalingTest(renderer, 'sdf', 'scale'),\n    ...generateScalingTest(renderer, 'sdf', 'scaleX'),\n    ...generateScalingTest(renderer, 'sdf', 'scaleY'),\n    ...generateScalingTest(renderer, 'canvas', 'scale'),\n    ...generateScalingTest(renderer, 'canvas', 'scaleX'),\n    ...generateScalingTest(renderer, 'canvas', 'scaleY'),\n  ]);\n\n  return pageContainer;\n}\n\nconst NODE_PROPS = {\n  x: 100,\n  y: 100,\n  color: 0x000000ff,\n  text: 'xyz',\n  fontFamily: 'Ubuntu',\n  textRendererOverride: 'sdf',\n  fontSize: 50,\n} satisfies Partial<ITextNodeWritableProps>;\n\nfunction generateScalingTest(\n  renderer: RendererMain,\n  textRenderer: 'canvas' | 'sdf',\n  scaleProp: 'scale' | 'scaleX' | 'scaleY',\n): TestRow[] {\n  return [\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer}, mount = 0)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n        const dimensions = await waitForTextDimensions(baselineNode);\n\n        // Get the position for the center of the container based on mount = 0\n        const position = {\n          x: 100 - dimensions.width / 2,\n          y: 100 - dimensions.height / 2,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer},  mount = 0.5)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          mount: 0.5,\n          x: 100,\n          y: 100,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n\n        const dimensions = await waitForTextDimensions(baselineNode);\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n    {\n      title: `Text Node ('${scaleProp}', ${textRenderer},  mount = 1)`,\n      content: async (rowNode) => {\n        const nodeProps = {\n          ...NODE_PROPS,\n          mount: 1,\n          textRendererOverride: textRenderer,\n        } satisfies Partial<ITextNodeWritableProps>;\n\n        const baselineNode = renderer.createTextNode({\n          ...nodeProps,\n        });\n        const dimensions = await waitForTextDimensions(baselineNode);\n\n        // Get the position for the center of the container based on mount = 1\n        const position = {\n          x: 100 + dimensions.width / 2,\n          y: 100 + dimensions.height / 2,\n        };\n\n        baselineNode.x = position.x;\n        baselineNode.y = position.y;\n\n        return await constructTestRow({ renderer, rowNode }, [\n          baselineNode,\n          'scale 2 ->\\npivot 0.5 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            [scaleProp]: 2,\n            // pivot: 0.5, (should be default)\n          }),\n          'pivot 0 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 0,\n            [scaleProp]: 2,\n          }),\n          'pivot 1 ->',\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            pivot: 1,\n            [scaleProp]: 2,\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'width'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'width',\n          }),\n          \"pivot 0.5 ->\\ncontain -> 'both'\",\n          renderer.createTextNode({\n            ...nodeProps,\n            ...position,\n            width: dimensions.width,\n            height: dimensions.height,\n            pivot: 0.5,\n            [scaleProp]: 2,\n            contain: 'both',\n          }),\n        ]);\n      },\n    },\n  ] satisfies TestRow[];\n}\n"],"names":[],"mappings":"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"}