{"version":3,"file":"ds-effect-radial-progress-51258c64.js","sources":["../../tests/ds-effect-radial-progress.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport async function automation(settings: ExampleSettings) {\n  // Snapshot single page\n  await test(settings);\n  await settings.snapshot();\n}\n\nexport default async function test({ renderer, testRoot }: ExampleSettings) {\n  const degToRad = (deg: number) => {\n    return (Math.PI / 180) * deg;\n  };\n\n  const t1 = renderer.createNode({\n    x: 200,\n    y: 100,\n    width: 250,\n    height: 250,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.6,\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t2 = renderer.createNode({\n    x: 500,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t3 = renderer.createNode({\n    x: 800,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            range: degToRad(180),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            range: degToRad(180),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t4 = renderer.createNode({\n    x: 1100,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  const t5 = renderer.createNode({\n    x: 1400,\n    y: 100,\n    width: 250,\n    height: 250,\n    color: 0xffffff00,\n    shader: renderer.createShader('DynamicShader', {\n      effects: [\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 1,\n            color: 0x000000ff,\n            width: 30,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'radialProgress',\n          props: {\n            progress: 0.2,\n            width: 30,\n            offset: -degToRad(120),\n            range: degToRad(240),\n          },\n        },\n        {\n          type: 'linearGradient',\n          props: {\n            angle: degToRad(90),\n            colors: [0xff0000ff, 0x00ff00ff],\n          },\n        },\n      ],\n    }),\n    parent: testRoot,\n  });\n\n  console.log('ready!');\n}\n"],"names":[],"mappings":"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"}