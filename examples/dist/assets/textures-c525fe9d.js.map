{"version":3,"file":"textures-c525fe9d.js","sources":["../../tests/textures.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type INode,\n  type Dimensions,\n  type NodeLoadedEventHandler,\n  type NodeFailedEventHandler,\n} from '@lightningjs/renderer';\nimport rockoImg from '../assets/rocko.png';\nimport elevatorImg from '../assets/elevator.png';\nimport spritemap from '../assets/spritemap.png';\nimport type { ExampleSettings } from '../common/ExampleSettings.js';\n\nexport default async function ({\n  renderer,\n  driverName,\n  testRoot,\n}: ExampleSettings) {\n  const FONT_SIZE = 45;\n  const BEGIN_Y = FONT_SIZE;\n\n  const header = renderer.createTextNode({\n    text: `Texture Test (${driverName})`,\n    fontSize: FONT_SIZE,\n    offsetY: -5,\n    parent: testRoot,\n  });\n\n  let curX = 0;\n  let curY = BEGIN_Y;\n  let curTest = 1;\n\n  const rocko = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(rocko, 181, 218);\n\n  // Test: Make sure events are still sent for textures that have been previously\n  // loaded\n\n  const rocko2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: rockoImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(rocko2, 181, 218);\n\n  const elevator = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: elevatorImg,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(elevator, 200, 268);\n\n  // Test: Check that we capture a texture load failure\n  const failure = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: 'does-not-exist.png',\n    parent: testRoot,\n  });\n\n  await execFailureTest(failure);\n\n  // Test: Check that we capture a texture load failure\n  const failure2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    src: 'does-not-exist.png',\n    parent: testRoot,\n  });\n\n  await execFailureTest(failure2);\n\n  // Test: NoiseTexture\n\n  curX = renderer.settings.appWidth / 2;\n  curY = BEGIN_Y;\n\n  const noiseTexture = renderer.createTexture('NoiseTexture', {\n    width: 100,\n    height: 100,\n  });\n\n  const noise = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: noiseTexture,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(noise, 100, 100);\n\n  // Test: NoiseTexture 2\n  const noise2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: noiseTexture,\n    parent: testRoot,\n  });\n\n  await execLoadingTest(noise2, 100, 100);\n\n  // Test: SubTexture Load\n  const spriteMapTexture = renderer.createTexture('ImageTexture', {\n    src: spritemap,\n  });\n\n  const frames = Array.from(Array(32).keys()).map((i) => {\n    const x = (i % 8) * 100;\n    const y = Math.floor(i / 8) * 150;\n    return renderer.createTexture('SubTexture', {\n      texture: spriteMapTexture,\n      x,\n      y,\n      width: 100,\n      height: 150,\n    });\n  });\n\n  const subTextureNode = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: frames[0],\n    parent: testRoot,\n  });\n\n  await execLoadingTest(subTextureNode, 100, 150);\n\n  // Test: SubTexture Load 2\n  const subTextureNode2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: frames[0],\n    parent: testRoot,\n  });\n\n  await execLoadingTest(subTextureNode2, 100, 150);\n\n  // Test: SubTetxure Failure\n  const failureTexture = renderer.createTexture('ImageTexture', {\n    src: 'does-not-exist.png',\n  });\n\n  const failureFrames = Array.from(Array(32).keys()).map((i) => {\n    const x = (i % 8) * 120;\n    const y = Math.floor(i / 8) * 120;\n    return renderer.createTexture('SubTexture', {\n      texture: failureTexture,\n      x,\n      y,\n      width: 120,\n      height: 120,\n    });\n  });\n\n  const subTxFailure = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: failureFrames[0],\n    parent: testRoot,\n  });\n\n  await execFailureTest(subTxFailure);\n\n  // Test: SubTexture Failure 2\n\n  const subTxFailure2 = renderer.createNode({\n    x: curX,\n    y: curY,\n    texture: failureFrames[0],\n    parent: testRoot,\n  });\n\n  await execFailureTest(subTxFailure2);\n\n  function waitForTxLoaded(imgNode: INode) {\n    return new Promise<Dimensions>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('loaded', ((target, payload) => {\n        resolve(payload.dimensions);\n      }) satisfies NodeLoadedEventHandler);\n    });\n  }\n\n  function waitForTxFailed(imgNode: INode) {\n    return new Promise<boolean>((resolve, reject) => {\n      setTimeout(() => {\n        reject(new Error('TIMEOUT'));\n      }, 1000);\n      imgNode.once('failed', (() => {\n        resolve(true);\n      }) satisfies NodeFailedEventHandler);\n    });\n  }\n\n  async function execLoadingTest(\n    imgNode: INode,\n    expectedWidth: number,\n    expectedHeight: number,\n  ) {\n    const textNode = renderer.createTextNode({\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      offsetY: -5,\n      parent: testRoot,\n    });\n\n    let exception: string | false = false;\n    let dimensions: Dimensions = { width: 0, height: 0 };\n    try {\n      dimensions = await waitForTxLoaded(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    imgNode.width = dimensions.width;\n    imgNode.height = dimensions.height;\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = 'Fail';\n    let expectedPostfix = '';\n    if (\n      !exception &&\n      imgNode.width === expectedWidth &&\n      imgNode.height === expectedHeight\n    ) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      if (exception) {\n        expectedPostfix = ` (exception: ${exception})`;\n      } else {\n        expectedPostfix = ` (expected ${expectedWidth}x${expectedHeight})`;\n      }\n    }\n    textNode.text = `${curTest}. Loaded Event Test: ${result} (${imgNode.width}x${imgNode.height})${expectedPostfix}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n\n  async function execFailureTest(imgNode: INode) {\n    const textNode = renderer.createTextNode({\n      x: curX,\n      text: '',\n      fontSize: FONT_SIZE,\n      offsetY: -5,\n      parent: testRoot,\n    });\n\n    let failureTestPass = false;\n    let exception: string | false = false;\n    try {\n      failureTestPass = await waitForTxFailed(imgNode);\n    } catch (e: unknown) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n      exception = (e as any)?.message ?? 'Unknown';\n    }\n\n    textNode.y = imgNode.y + imgNode.height;\n    let result = '';\n    if (!exception && failureTestPass) {\n      textNode.color = 0x00ff00ff;\n      result = 'Pass';\n    } else {\n      textNode.color = 0xff0000ff;\n      result = 'Fail';\n      if (exception) {\n        result += ` (exception: ${exception})`;\n      }\n    }\n    textNode.text = `${curTest}. Failure Event Test: ${result}`;\n    curY = textNode.y + FONT_SIZE;\n    curTest++;\n  }\n}\n"],"names":[],"mappings":";;AA8B+B,eAAA,SAAA;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AACF,GAAoB;AAClB,QAAM,YAAY;AAClB,QAAM,UAAU;AAED,WAAS,eAAe;AAAA,IACrC,MAAM,iBAAiB,UAAU;AAAA,IACjC,UAAU;AAAA,IACV,SAAS;AAAA,IACT,QAAQ;AAAA,EAAA,CACT;AAED,MAAI,OAAO;AACX,MAAI,OAAO;AACX,MAAI,UAAU;AAER,QAAA,QAAQ,SAAS,WAAW;AAAA,IAChC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,OAAO,KAAK,GAAG;AAK/B,QAAA,SAAS,SAAS,WAAW;AAAA,IACjC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,QAAQ,KAAK,GAAG;AAEhC,QAAA,WAAW,SAAS,WAAW;AAAA,IACnC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,UAAU,KAAK,GAAG;AAGlC,QAAA,UAAU,SAAS,WAAW;AAAA,IAClC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AAED,QAAM,gBAAgB,OAAO;AAGvB,QAAA,WAAW,SAAS,WAAW;AAAA,IACnC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,KAAK;AAAA,IACL,QAAQ;AAAA,EAAA,CACT;AAED,QAAM,gBAAgB,QAAQ;AAIvB,SAAA,SAAS,SAAS,WAAW;AAC7B,SAAA;AAED,QAAA,eAAe,SAAS,cAAc,gBAAgB;AAAA,IAC1D,OAAO;AAAA,IACP,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,QAAQ,SAAS,WAAW;AAAA,IAChC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS;AAAA,IACT,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,OAAO,KAAK,GAAG;AAG/B,QAAA,SAAS,SAAS,WAAW;AAAA,IACjC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS;AAAA,IACT,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,QAAQ,KAAK,GAAG;AAGhC,QAAA,mBAAmB,SAAS,cAAc,gBAAgB;AAAA,IAC9D,KAAK;AAAA,EAAA,CACN;AAEK,QAAA,SAAS,MAAM,KAAK,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM;AAC/C,UAAA,IAAK,IAAI,IAAK;AACpB,UAAM,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI;AACvB,WAAA,SAAS,cAAc,cAAc;AAAA,MAC1C,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAAA,EAAA,CACF;AAEK,QAAA,iBAAiB,SAAS,WAAW;AAAA,IACzC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS,OAAO,CAAC;AAAA,IACjB,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,gBAAgB,KAAK,GAAG;AAGxC,QAAA,kBAAkB,SAAS,WAAW;AAAA,IAC1C,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS,OAAO,CAAC;AAAA,IACjB,QAAQ;AAAA,EAAA,CACT;AAEK,QAAA,gBAAgB,iBAAiB,KAAK,GAAG;AAGzC,QAAA,iBAAiB,SAAS,cAAc,gBAAgB;AAAA,IAC5D,KAAK;AAAA,EAAA,CACN;AAEK,QAAA,gBAAgB,MAAM,KAAK,MAAM,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM;AACtD,UAAA,IAAK,IAAI,IAAK;AACpB,UAAM,IAAI,KAAK,MAAM,IAAI,CAAC,IAAI;AACvB,WAAA,SAAS,cAAc,cAAc;AAAA,MAC1C,SAAS;AAAA,MACT;AAAA,MACA;AAAA,MACA,OAAO;AAAA,MACP,QAAQ;AAAA,IAAA,CACT;AAAA,EAAA,CACF;AAEK,QAAA,eAAe,SAAS,WAAW;AAAA,IACvC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS,cAAc,CAAC;AAAA,IACxB,QAAQ;AAAA,EAAA,CACT;AAED,QAAM,gBAAgB,YAAY;AAI5B,QAAA,gBAAgB,SAAS,WAAW;AAAA,IACxC,GAAG;AAAA,IACH,GAAG;AAAA,IACH,SAAS,cAAc,CAAC;AAAA,IACxB,QAAQ;AAAA,EAAA,CACT;AAED,QAAM,gBAAgB,aAAa;AAEnC,WAAS,gBAAgB,SAAgB;AACvC,WAAO,IAAI,QAAoB,CAAC,SAAS,WAAW;AAClD,iBAAW,MAAM;AACR,eAAA,IAAI,MAAM,SAAS,CAAC;AAAA,SAC1B,GAAI;AACP,cAAQ,KAAK,UAAW,CAAC,QAAQ,YAAY;AAC3C,gBAAQ,QAAQ,UAAU;AAAA,MAAA,CACO;AAAA,IAAA,CACpC;AAAA,EACH;AAEA,WAAS,gBAAgB,SAAgB;AACvC,WAAO,IAAI,QAAiB,CAAC,SAAS,WAAW;AAC/C,iBAAW,MAAM;AACR,eAAA,IAAI,MAAM,SAAS,CAAC;AAAA,SAC1B,GAAI;AACC,cAAA,KAAK,UAAW,MAAM;AAC5B,gBAAQ,IAAI;AAAA,MAAA,CACqB;AAAA,IAAA,CACpC;AAAA,EACH;AAEe,iBAAA,gBACb,SACA,eACA,gBACA;;AACM,UAAA,WAAW,SAAS,eAAe;AAAA,MACvC,GAAG;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,IAAA,CACT;AAED,QAAI,YAA4B;AAChC,QAAI,aAAyB,EAAE,OAAO,GAAG,QAAQ,EAAE;AAC/C,QAAA;AACW,mBAAA,MAAM,gBAAgB,OAAO;AAAA,aACnC,GAAY;AAEnB,mBAAa,4BAAW,YAAX,YAAsB;AAAA,IACrC;AAEA,YAAQ,QAAQ,WAAW;AAC3B,YAAQ,SAAS,WAAW;AAEnB,aAAA,IAAI,QAAQ,IAAI,QAAQ;AACjC,QAAI,SAAS;AACb,QAAI,kBAAkB;AACtB,QACE,CAAC,aACD,QAAQ,UAAU,iBAClB,QAAQ,WAAW,gBACnB;AACA,eAAS,QAAQ;AACR,eAAA;AAAA,IAAA,OACJ;AACL,eAAS,QAAQ;AACjB,UAAI,WAAW;AACb,0BAAkB,gBAAgB,SAAS;AAAA,MAAA,OACtC;AACa,0BAAA,cAAc,aAAa,IAAI,cAAc;AAAA,MACjE;AAAA,IACF;AACA,aAAS,OAAO,GAAG,OAAO,wBAAwB,MAAM,KAAK,QAAQ,KAAK,IAAI,QAAQ,MAAM,IAAI,eAAe;AAC/G,WAAO,SAAS,IAAI;AACpB;AAAA,EACF;AAEA,iBAAe,gBAAgB,SAAgB;;AACvC,UAAA,WAAW,SAAS,eAAe;AAAA,MACvC,GAAG;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,MACT,QAAQ;AAAA,IAAA,CACT;AAED,QAAI,kBAAkB;AACtB,QAAI,YAA4B;AAC5B,QAAA;AACgB,wBAAA,MAAM,gBAAgB,OAAO;AAAA,aACxC,GAAY;AAEnB,mBAAa,4BAAW,YAAX,YAAsB;AAAA,IACrC;AAES,aAAA,IAAI,QAAQ,IAAI,QAAQ;AACjC,QAAI,SAAS;AACT,QAAA,CAAC,aAAa,iBAAiB;AACjC,eAAS,QAAQ;AACR,eAAA;AAAA,IAAA,OACJ;AACL,eAAS,QAAQ;AACR,eAAA;AACT,UAAI,WAAW;AACb,kBAAU,gBAAgB,SAAS;AAAA,MACrC;AAAA,IACF;AACA,aAAS,OAAO,GAAG,OAAO,yBAAyB,MAAM;AACzD,WAAO,SAAS,IAAI;AACpB;AAAA,EACF;AACF;"}