{"version":3,"file":"utils-4cd19c14.js","sources":["../../common/paginateTestRows.ts","../../common/utils.ts"],"sourcesContent":["/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { INode } from '@lightningjs/renderer';\nimport { PageContainer } from './PageContainer.js';\nimport { assertTruthy } from '@lightningjs/renderer/utils';\n\nconst HEADER_FONT_SIZE = 30;\nconst PADDING = 20;\n\nexport type RowConstructor = (pageNode: INode) => Promise<INode>;\nexport type RowContentConstructor = (rowNode: INode) => Promise<number>;\n\nexport interface TestRowDesc {\n  title: string;\n  content: RowContentConstructor;\n}\n\nexport type TestRow = TestRowDesc | null;\n\nfunction createPageConstructor(curPageRowConstructors: RowConstructor[]) {\n  return async function (\n    rowConstructors: RowConstructor[],\n    pageNode: INode,\n  ): Promise<void> {\n    let curY = 0;\n    for (const rowConstructor of rowConstructors) {\n      const rowNode = await rowConstructor(pageNode);\n      rowNode.y = curY;\n      curY += rowNode.height;\n    }\n  }.bind(null, curPageRowConstructors);\n}\n\n/**\n * Paginate a list of test rows\n *\n * @remarks\n * `null` values in the testRows array will be treated as manual page breaks\n *\n * @param pageContainer\n * @param testRows\n */\nexport async function paginateTestRows(\n  pageContainer: PageContainer,\n  testRows: (TestRow | null)[],\n) {\n  const renderer = pageContainer.renderer;\n  assertTruthy(renderer.root);\n  let pageCurY = 0;\n  let curPageRowConstructors: RowConstructor[] = [];\n  let curRowIndex = 0;\n  for (const testRow of testRows) {\n    const isLastRow = curRowIndex === testRows.length - 1;\n    let newRowConstructor: RowConstructor | null =\n      testRow &&\n      (async (pageNode: INode) => {\n        assertTruthy(testRow);\n        const rowContainer = renderer.createNode({\n          x: 0,\n          y: pageCurY,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: pageNode,\n        });\n        const rowHeaderNode = renderer.createTextNode({\n          fontFamily: 'Ubuntu',\n          fontSize: HEADER_FONT_SIZE,\n          y: PADDING,\n          parent: rowContainer,\n        });\n        const rowNode = renderer.createNode({\n          y: HEADER_FONT_SIZE + PADDING * 2,\n          width: pageContainer.contentWidth,\n          height: 0,\n          color: 0x00000000,\n          parent: rowContainer,\n        });\n        const rowHeight = await testRow.content(rowNode);\n        rowNode.height = rowHeight;\n        rowHeaderNode.text = testRow.title;\n        rowContainer.height = HEADER_FONT_SIZE + PADDING * 2 + rowNode.height;\n        return rowContainer;\n      });\n\n    let itFits = false;\n    let tmpRowContainer: INode | undefined;\n    // debugger;\n    if (newRowConstructor) {\n      // Construct the row just to get its height\n      tmpRowContainer = await newRowConstructor(renderer.root);\n      // curPageRowConstructors.push(newRowConstructor);\n      // If it fits, add it to the current page\n      itFits = pageCurY + tmpRowContainer.height <= pageContainer.contentHeight;\n      if (itFits) {\n        curPageRowConstructors.push(newRowConstructor);\n        pageCurY += tmpRowContainer.height;\n        newRowConstructor = null;\n      }\n    }\n\n    // If it doesn't fit OR it's the last row, add the current page to the page container and start a new page\n    if (!itFits || isLastRow) {\n      const pageConstructor = createPageConstructor(curPageRowConstructors);\n      pageContainer.pushPage(pageConstructor);\n\n      pageCurY = tmpRowContainer?.height || 0;\n      curPageRowConstructors = [];\n      if (newRowConstructor) {\n        curPageRowConstructors.push(newRowConstructor);\n      }\n\n      if (isLastRow && !itFits && curPageRowConstructors.length > 0) {\n        const pageConstructor = createPageConstructor(curPageRowConstructors);\n        pageContainer.pushPage(pageConstructor);\n      }\n    }\n    if (tmpRowContainer) {\n      tmpRowContainer.parent = null;\n      tmpRowContainer.destroy();\n    }\n\n    curRowIndex++;\n  }\n  pageContainer.finalizePages();\n}\n","/*\n * If not stated otherwise in this file or this component's LICENSE file the\n * following copyright and licenses apply:\n *\n * Copyright 2023 Comcast Cable Communications Management, LLC.\n *\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type {\n  Dimensions,\n  ITextNode,\n  INode,\n  NodeTextLoadedPayload,\n} from '@lightningjs/renderer';\n\nexport async function waitForTextDimensions(\n  node: ITextNode,\n): Promise<Dimensions> {\n  return new Promise((resolve) => {\n    node.once('loaded', (_node: INode, payload: NodeTextLoadedPayload) => {\n      const { width, height } = payload.dimensions;\n      resolve({\n        width,\n        height,\n      });\n    });\n  });\n}\n"],"names":["pageConstructor"],"mappings":";AAuBA,MAAM,mBAAmB;AACzB,MAAM,UAAU;AAYhB,SAAS,sBAAsB,wBAA0C;AAChE,SAAA,eACL,iBACA,UACe;AACf,QAAI,OAAO;AACX,eAAW,kBAAkB,iBAAiB;AACtC,YAAA,UAAU,MAAM,eAAe,QAAQ;AAC7C,cAAQ,IAAI;AACZ,cAAQ,QAAQ;AAAA,IAClB;AAAA,EAAA,EACA,KAAK,MAAM,sBAAsB;AACrC;AAWsB,eAAA,iBACpB,eACA,UACA;AACA,QAAM,WAAW,cAAc;AAC/B,eAAa,SAAS,IAAI;AAC1B,MAAI,WAAW;AACf,MAAI,yBAA2C,CAAA;AAC/C,MAAI,cAAc;AAClB,aAAW,WAAW,UAAU;AACxB,UAAA,YAAY,gBAAgB,SAAS,SAAS;AAChD,QAAA,oBACF,YACC,OAAO,aAAoB;AAC1B,mBAAa,OAAO;AACd,YAAA,eAAe,SAAS,WAAW;AAAA,QACvC,GAAG;AAAA,QACH,GAAG;AAAA,QACH,OAAO,cAAc;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ;AAAA,MAAA,CACT;AACK,YAAA,gBAAgB,SAAS,eAAe;AAAA,QAC5C,YAAY;AAAA,QACZ,UAAU;AAAA,QACV,GAAG;AAAA,QACH,QAAQ;AAAA,MAAA,CACT;AACK,YAAA,UAAU,SAAS,WAAW;AAAA,QAClC,GAAG,mBAAmB,UAAU;AAAA,QAChC,OAAO,cAAc;AAAA,QACrB,QAAQ;AAAA,QACR,OAAO;AAAA,QACP,QAAQ;AAAA,MAAA,CACT;AACD,YAAM,YAAY,MAAM,QAAQ,QAAQ,OAAO;AAC/C,cAAQ,SAAS;AACjB,oBAAc,OAAO,QAAQ;AAC7B,mBAAa,SAAS,mBAAmB,UAAU,IAAI,QAAQ;AACxD,aAAA;AAAA,IAAA;AAGX,QAAI,SAAS;AACT,QAAA;AAEJ,QAAI,mBAAmB;AAEH,wBAAA,MAAM,kBAAkB,SAAS,IAAI;AAG9C,eAAA,WAAW,gBAAgB,UAAU,cAAc;AAC5D,UAAI,QAAQ;AACV,+BAAuB,KAAK,iBAAiB;AAC7C,oBAAY,gBAAgB;AACR,4BAAA;AAAA,MACtB;AAAA,IACF;AAGI,QAAA,CAAC,UAAU,WAAW;AAClB,YAAA,kBAAkB,sBAAsB,sBAAsB;AACpE,oBAAc,SAAS,eAAe;AAEtC,kBAAW,mDAAiB,WAAU;AACtC,+BAAyB,CAAA;AACzB,UAAI,mBAAmB;AACrB,+BAAuB,KAAK,iBAAiB;AAAA,MAC/C;AAEA,UAAI,aAAa,CAAC,UAAU,uBAAuB,SAAS,GAAG;AACvDA,cAAAA,mBAAkB,sBAAsB,sBAAsB;AACpE,sBAAc,SAASA,gBAAe;AAAA,MACxC;AAAA,IACF;AACA,QAAI,iBAAiB;AACnB,sBAAgB,SAAS;AACzB,sBAAgB,QAAQ;AAAA,IAC1B;AAEA;AAAA,EACF;AACA,gBAAc,cAAc;AAC9B;ACpHA,eAAsB,sBACpB,MACqB;AACd,SAAA,IAAI,QAAQ,CAAC,YAAY;AAC9B,SAAK,KAAK,UAAU,CAAC,OAAc,YAAmC;AACpE,YAAM,EAAE,OAAO,WAAW,QAAQ;AAC1B,cAAA;AAAA,QACN;AAAA,QACA;AAAA,MAAA,CACD;AAAA,IAAA,CACF;AAAA,EAAA,CACF;AACH;"}